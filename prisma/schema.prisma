// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Movie {
  id           String     @id @default(uuid())
  tmdbID       Int        @unique
  title        String
  poster_path  String
  vote_average Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Review       Review[]
  Favorite     Favorite[]
  Watched      Watched[]
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      @default(0)
  comment   String?
  tmdbID    Int
  userID    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movie     Movie    @relation(fields: [tmdbID], references: [tmdbID])

  @@unique([tmdbID, userID])
}

model Favorite {
  id        String   @id @default(uuid())
  tmdbID    Int
  userID    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movie     Movie    @relation(fields: [tmdbID], references: [tmdbID])

  @@unique([tmdbID, userID])
}

model Watched {
  id        String   @id @default(uuid())
  tmdbID    Int
  userID    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movie     Movie    @relation(fields: [tmdbID], references: [tmdbID])

  @@unique([tmdbID, userID])
}
